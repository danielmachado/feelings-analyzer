#Rakefile
require 'rubygems'
require 'bundler'

begin
	Bundler.setup(:default)
rescue Bundler::BundlerError => e
	$stderr.puts e.message
	$stderr.puts "Run `bundle install` to install missing gems"
	exit e.status_code
end

require 'rake'

require './lib/database/redis_db.rb'
require './lib/utils/csv_parser.rb'
require './lib/utils/tokenizer.rb'
require './lib/utils/stemmizer.rb'
require './lib/utils/extract_tweets.rb'
require './lib/utils/extract_tweets_words.rb'
require './lib/score.rb'
require './lib/calculate_score.rb'
require './lib/calculate_punctuation_tweets.rb'

desc 'Calculate the tweet punctuation from the corpus'
task :calculate_punctuation_tweets do

	c = CalculatePunctuationTweets.new
	c.calculate './resources/spanish-tweets-2009-08.txt'

end

desc 'Extract tweets to TRAIN database'
task :extract_tweets_score do

	con = RedisDB.new
	con.connect_database RedisDB::TWEETS

	con.clean RedisDB::TRAIN

	ext = ExtractTweets.new
	ext.extract './resources/spanish-tweets-2009-08.txt'


end

desc 'Extract tweets and classifies them'
task :extract_words_tweets do
	con = RedisDB.new
	con.connect_database RedisDB::TWEETS

	con.clean RedisDB::HAPPY
	con.clean RedisDB::SAD
	extW = ExtractTweetsWords.new
	extW.extract

	puts "NUMBER OF HAPPY: " + extW.numHappy.to_s
	puts "NUMBER OF SAD: " + extW.numSad.to_s

end

desc 'empty sad and happy databases'
task :delete_words do

	extW = ExtractTweetsWords.new

	extW.delete_words RedisDB::HAPPY
	extW.delete_words RedisDB::SAD

end

desc 'Calculates relatives scores from TRAIN'
task :calculate_scores_words_relatives do
	con = RedisDB.new
	con.connect_database RedisDB::TWEETS

	numHappy = 46704
	numSad = 21987

	con.clean RedisDB::REL_HAPPY
	con.clean RedisDB::REL_SAD

	cal = CalculateScore.new
	cal.calculate_relatives_frecuencies RedisDB::HAPPY, numHappy
	cal.calculate_relatives_frecuencies RedisDB::SAD, numSad
end

desc 'Calculates limits scores from REL_HAPPY and REL_SAD'
task :calculate_scores_words_limits do
	con = RedisDB.new
	con.connect_database RedisDB::TWEETS	

	con.clean RedisDB::LIMIT_HAPPY
	con.clean RedisDB::LIMIT_SAD
	
	cal = CalculateScore.new
	cal.calculate_limit_scores RedisDB::REL_HAPPY, RedisDB::REL_SAD, 1
	cal.calculate_limit_scores RedisDB::REL_SAD, RedisDB::REL_HAPPY, -1
end

desc 'Calculates the combinated score from LIMIT_SAD and LIMIT_HAPPY'
task :calculate_scores_words_combinate do
	con = RedisDB.new
	con.connect_database RedisDB::TWEETS

	con.clean RedisDB::COMBINATE

	cal = CalculateScore.new
	cal.calculate_combinate_score

end

desc 'Calculates the final score from COMBINATE'
task :calculate_scores_words_final do
	con = RedisDB.new
	con.connect_database RedisDB::TWEETS

	cal = CalculateScore.new

	con.clean RedisDB::SCORE_FINAL
	cal.calculate_final
end


desc "Parses the CSV File"
task :csv_parser do

	con = RedisDB.new
	con.connect_database "stems"

	con.clean "es"
	con.clean "en"

	csvp = CSVParser.new
	csvp.parse './resources/ratings.csv'

end

desc "Parses the CSV File with the new lexic"
task :csv_parser_new do

	con = RedisDB.new
	con.connect_database "steams"

	con.clean "stems_new_lex"

	csvp = CSVParser.new
	csvp.parse_new_lex './resources/newLexic.csv'

end

desc "Connects to the db and test it"
task :redis_db do

	r_db = RedisDB.new
	r_db.connect_database "stems"
	puts((r_db.get_word 'es', 'zombi'))

end

desc "Splits a text into tokens"
task :tokenizer do

	s = Splitter.new
	puts(s.split 'Habia una vez, una casa. Esta casa, tenia muchas cosas; como por ejemplo: un tejado, una ventana y una puerta.')

end

desc 'Tests the score'
task :score do

	score = Score.new
	puts (score.score 'Habia una vez, una casa. Esta casa, tenia muchas cosas; como por ejemplo: un tejado, una ventana y una puerta.')

end

desc 'Scores a csv file'
task :score_csv do

	stems = RedisDB.new
	stems.connect_database 'stems'
	(stems.get_keys 'es').each do |v|
		puts v + ': ' + (stems.get_word 'es', v).to_s
	end

end

desc 'Scores a file'
task :score_tweet do

	stems = RedisDB.new
	stems.connect_database 'stems'
	(stems.get_keys 'stems_new_lex').each do |v|
		puts v + ': ' + (stems.get_word 'stems_new_lex', v).to_s
	end

end

desc 'clean the new lexic database'
task :clean_tweet do

	stems = RedisDB.new
	stems.connect_database 'stems'

	stems.clean 'stems_new_lex'

end

desc 'clean the Warriners database'
task :clean_csv do

	stems = RedisDB.new
	stems.connect_database 'stems'

	stems.clean 'es'
	stems.clean 'en'

end

desc 'Calculate the keys generated by happy texts'
task :prueba do

	t = RedisDB.new
	t.connect_database RedisDB::TEST
	tweets = t.get_keys RedisDB::HAPPY
	puts "Hay "+ (tweets.size).to_s


end